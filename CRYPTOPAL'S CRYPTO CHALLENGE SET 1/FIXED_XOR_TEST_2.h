#pragma once
#include "XOR_strings_2.h"

void TEST_2(std::string hex_first, std::string hex_second, std::string expected) {

	std::string result_XOR_String = XOR_strings(hex_first, hex_second);


	if (result_XOR_String == expected) {
		return;
	}
	else
	{
		std::cout << "ERROR (in TEST) --> result_XOR_String != expected" << std::endl;
		std::cout << "expected: " << expected << std::endl;
		std::cout << "result_XOR_String: " << result_XOR_String << std::endl;
		return;
	}

}

void Challenge_Problem_2_TESTS() {
	// unit tests for size 1

	TEST_2("0", "0", "0");
	TEST_2("0", "1", "1");
	TEST_2("0", "2", "2");
	TEST_2("0", "3", "3");
	TEST_2("0", "4", "4");
	TEST_2("0", "5", "5");
	TEST_2("0", "6", "6");
	TEST_2("0", "7", "7");
	TEST_2("0", "8", "8");
	TEST_2("0", "9", "9");
	TEST_2("0", "a", "a");
	TEST_2("0", "b", "b");
	TEST_2("0", "c", "c");
	TEST_2("0", "d", "d");
	TEST_2("0", "e", "e");
	TEST_2("0", "f", "f");


	TEST_2("1", "0", "1");
	TEST_2("1", "1", "0");
	TEST_2("1", "2", "3");
	TEST_2("1", "3", "2");
	TEST_2("1", "4", "5");
	TEST_2("1", "5", "4");
	TEST_2("1", "6", "7");
	TEST_2("1", "7", "6");
	TEST_2("1", "8", "9");
	TEST_2("1", "9", "8");
	TEST_2("1", "a", "b");
	TEST_2("1", "b", "a");
	TEST_2("1", "c", "d");
	TEST_2("1", "d", "c");
	TEST_2("1", "e", "f");
	TEST_2("1", "f", "e");


	TEST_2("2", "0", "2");
	TEST_2("2", "1", "3");
	TEST_2("2", "2", "0");
	TEST_2("2", "3", "1");
	TEST_2("2", "4", "6");
	TEST_2("2", "5", "7");
	TEST_2("2", "6", "4");
	TEST_2("2", "7", "5");
	TEST_2("2", "8", "a");
	TEST_2("2", "9", "b");
	TEST_2("2", "a", "8");
	TEST_2("2", "b", "9");
	TEST_2("2", "c", "e");
	TEST_2("2", "d", "f");
	TEST_2("2", "e", "c");
	TEST_2("2", "f", "d");


	TEST_2("3", "0", "3");
	TEST_2("3", "1", "2");
	TEST_2("3", "2", "1");
	TEST_2("3", "3", "0");
	TEST_2("3", "4", "7");
	TEST_2("3", "5", "6");
	TEST_2("3", "6", "5");
	TEST_2("3", "7", "4");
	TEST_2("3", "8", "b");
	TEST_2("3", "9", "a");
	TEST_2("3", "a", "9");
	TEST_2("3", "b", "8");
	TEST_2("3", "c", "f");
	TEST_2("3", "d", "e");
	TEST_2("3", "e", "d");
	TEST_2("3", "f", "c");


	TEST_2("4", "0", "4");
	TEST_2("4", "1", "5");
	TEST_2("4", "2", "6");
	TEST_2("4", "3", "7");
	TEST_2("4", "4", "0");
	TEST_2("4", "5", "1");
	TEST_2("4", "6", "2");
	TEST_2("4", "7", "3");
	TEST_2("4", "8", "c");
	TEST_2("4", "9", "d");
	TEST_2("4", "a", "e");
	TEST_2("4", "b", "f");
	TEST_2("4", "c", "8");
	TEST_2("4", "d", "9");
	TEST_2("4", "e", "a");
	TEST_2("4", "f", "b");


	TEST_2("5", "0", "5");
	TEST_2("5", "1", "4");
	TEST_2("5", "2", "7");
	TEST_2("5", "3", "6");
	TEST_2("5", "4", "1");
	TEST_2("5", "5", "0");
	TEST_2("5", "6", "3");
	TEST_2("5", "7", "2");
	TEST_2("5", "8", "d");
	TEST_2("5", "9", "c");
	TEST_2("5", "a", "f");
	TEST_2("5", "b", "e");
	TEST_2("5", "c", "9");
	TEST_2("5", "d", "8");
	TEST_2("5", "e", "b");
	TEST_2("5", "f", "a");


	TEST_2("6", "0", "6");
	TEST_2("6", "1", "7");
	TEST_2("6", "2", "4");
	TEST_2("6", "3", "5");
	TEST_2("6", "4", "2");
	TEST_2("6", "5", "3");
	TEST_2("6", "6", "0");
	TEST_2("6", "7", "1");
	TEST_2("6", "8", "e");
	TEST_2("6", "9", "f");
	TEST_2("6", "a", "c");
	TEST_2("6", "b", "d");
	TEST_2("6", "c", "a");
	TEST_2("6", "d", "b");
	TEST_2("6", "e", "8");
	TEST_2("6", "f", "9");


	TEST_2("7", "0", "7");
	TEST_2("7", "1", "6");
	TEST_2("7", "2", "5");
	TEST_2("7", "3", "4");
	TEST_2("7", "4", "3");
	TEST_2("7", "5", "2");
	TEST_2("7", "6", "1");
	TEST_2("7", "7", "0");
	TEST_2("7", "8", "f");
	TEST_2("7", "9", "e");
	TEST_2("7", "a", "d");
	TEST_2("7", "b", "c");
	TEST_2("7", "c", "b");
	TEST_2("7", "d", "a");
	TEST_2("7", "e", "9");
	TEST_2("7", "f", "8");

	TEST_2("8", "0", "8");
	TEST_2("8", "1", "9");
	TEST_2("8", "2", "a");
	TEST_2("8", "3", "b");
	TEST_2("8", "4", "c");
	TEST_2("8", "5", "d");
	TEST_2("8", "6", "e");
	TEST_2("8", "7", "f");
	TEST_2("8", "8", "0");
	TEST_2("8", "9", "1");
	TEST_2("8", "a", "2");
	TEST_2("8", "b", "3");
	TEST_2("8", "c", "4");
	TEST_2("8", "d", "5");
	TEST_2("8", "e", "6");
	TEST_2("8", "f", "7");

	TEST_2("9", "0", "9");
	TEST_2("9", "1", "8");
	TEST_2("9", "2", "b");
	TEST_2("9", "3", "a");
	TEST_2("9", "4", "d");
	TEST_2("9", "5", "c");
	TEST_2("9", "6", "f");
	TEST_2("9", "7", "e");
	TEST_2("9", "8", "1");
	TEST_2("9", "9", "0");
	TEST_2("9", "a", "3");
	TEST_2("9", "b", "2");
	TEST_2("9", "c", "5");
	TEST_2("9", "d", "4");
	TEST_2("9", "e", "7");
	TEST_2("9", "f", "6");

	TEST_2("a", "0", "a");
	TEST_2("a", "1", "b");
	TEST_2("a", "2", "8");
	TEST_2("a", "3", "9");
	TEST_2("a", "4", "e");
	TEST_2("a", "5", "f");
	TEST_2("a", "6", "c");
	TEST_2("a", "7", "d");
	TEST_2("a", "8", "2");
	TEST_2("a", "9", "3");
	TEST_2("a", "a", "0");
	TEST_2("a", "b", "1");
	TEST_2("a", "c", "6");
	TEST_2("a", "d", "7");
	TEST_2("a", "e", "4");
	TEST_2("a", "f", "5");

	TEST_2("b", "0", "b");
	TEST_2("b", "1", "a");
	TEST_2("b", "2", "9");
	TEST_2("b", "3", "8");
	TEST_2("b", "4", "f");
	TEST_2("b", "5", "e");
	TEST_2("b", "6", "d");
	TEST_2("b", "7", "c");
	TEST_2("b", "8", "3");
	TEST_2("b", "9", "2");
	TEST_2("b", "a", "1");
	TEST_2("b", "b", "0");
	TEST_2("b", "c", "7");
	TEST_2("b", "d", "6");
	TEST_2("b", "e", "5");
	TEST_2("b", "f", "4");

	TEST_2("c", "0", "c");
	TEST_2("c", "1", "d");
	TEST_2("c", "2", "e");
	TEST_2("c", "3", "f");
	TEST_2("c", "4", "8");
	TEST_2("c", "5", "9");
	TEST_2("c", "6", "a");
	TEST_2("c", "7", "b");
	TEST_2("c", "8", "4");
	TEST_2("c", "9", "5");
	TEST_2("c", "a", "6");
	TEST_2("c", "b", "7");
	TEST_2("c", "c", "0");
	TEST_2("c", "d", "1");
	TEST_2("c", "e", "2");
	TEST_2("c", "f", "3");

	TEST_2("d", "0", "d");
	TEST_2("d", "1", "c");
	TEST_2("d", "2", "f");
	TEST_2("d", "3", "e");
	TEST_2("d", "4", "9");
	TEST_2("d", "5", "8");
	TEST_2("d", "6", "b");
	TEST_2("d", "7", "a");
	TEST_2("d", "8", "5");
	TEST_2("d", "9", "4");
	TEST_2("d", "a", "7");
	TEST_2("d", "b", "6");
	TEST_2("d", "c", "1");
	TEST_2("d", "d", "0");
	TEST_2("d", "e", "3");
	TEST_2("d", "f", "2");

	TEST_2("e", "0", "e");
	TEST_2("e", "1", "f");
	TEST_2("e", "2", "c");
	TEST_2("e", "3", "d");
	TEST_2("e", "4", "a");
	TEST_2("e", "5", "b");
	TEST_2("e", "6", "8");
	TEST_2("e", "7", "9");
	TEST_2("e", "8", "6");
	TEST_2("e", "9", "7");
	TEST_2("e", "a", "4");
	TEST_2("e", "b", "5");
	TEST_2("e", "c", "2");
	TEST_2("e", "d", "3");
	TEST_2("e", "e", "0");
	TEST_2("e", "f", "1");

	TEST_2("f", "0", "f");
	TEST_2("f", "1", "e");
	TEST_2("f", "2", "d");
	TEST_2("f", "3", "c");
	TEST_2("f", "4", "b");
	TEST_2("f", "5", "a");
	TEST_2("f", "6", "9");
	TEST_2("f", "7", "8");
	TEST_2("f", "8", "7");
	TEST_2("f", "9", "6");
	TEST_2("f", "a", "5");
	TEST_2("f", "b", "4");
	TEST_2("f", "c", "3");
	TEST_2("f", "d", "2");
	TEST_2("f", "e", "1");
	TEST_2("f", "f", "0");
}